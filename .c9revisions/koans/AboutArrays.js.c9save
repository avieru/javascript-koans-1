{"ts":1340770293593,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"describe(\"About Arrays\", function() {\n\n  //We shall contemplate truth by testing reality, via spec expectations.  \n  it(\"should create arrays\", function() {\n    var emptyArray = [];\n    expect(typeof(emptyArray)).toBe(FILL_ME_IN); //A mistake? - http:javascript.crockford.com/remedial.html\n    expect(emptyArray.length).toBe(FILL_ME_IN);\n\n    var multiTypeArray = [0, 1, \"two\", function () { return 3; }, {value1: 4, value2: 5}, [6, 7]];\n    expect(multiTypeArray[0]).toBe(FILL_ME_IN);\n    expect(multiTypeArray[2]).toBe(FILL_ME_IN);\n    expect(multiTypeArray[3]()).toBe(FILL_ME_IN);\n    expect(multiTypeArray[4].value1).toBe(FILL_ME_IN);\n    expect(multiTypeArray[4][\"value2\"]).toBe(FILL_ME_IN);\n    expect(multiTypeArray[5][0]).toBe(FILL_ME_IN);\n  });\n\n  it(\"should understand array literals\", function () {\n    var array = [];\n    expect(array).toEqual([]);\n    \n    array[0] = 1;\n    expect(array).toEqual([1]);\n    \n    array[1] = 2;\n    expect(array).toEqual([1, FILL_ME_IN]);\n    \n    array.push(3);\n    expect(array).toEqual(FILL_ME_IN);\n  });\n\n  it(\"should understand array length\", function () {\n    var fourNumberArray = [1, 2, 3, 4];\n\n    expect(fourNumberArray.length).toBe(FILL_ME_IN);\n    fourNumberArray.push(5, 6);\n    expect(fourNumberArray.length).toBe(FILL_ME_IN);\n\n    var tenEmptyElementArray = new Array(10); \n    expect(tenEmptyElementArray.length).toBe(FILL_ME_IN);\n\n    tenEmptyElementArray.length = 5;\n    expect(tenEmptyElementArray.length).toBe(FILL_ME_IN);\n  });\n\n  it(\"should slice arrays\", function () {\n    var array = [\"peanut\", \"butter\", \"and\", \"jelly\"];\n    \n    expect(array.slice(0, 1)).toEqual(FILL_ME_IN);\n    expect(array.slice(0, 2)).toEqual(FILL_ME_IN);\n    expect(array.slice(2, 2)).toEqual(FILL_ME_IN);\n    expect(array.slice(2, 20)).toEqual(FILL_ME_IN);\n    expect(array.slice(3, 0)).toEqual(FILL_ME_IN);\n    expect(array.slice(3, 100)).toEqual(FILL_ME_IN);\n    expect(array.slice(5, 1)).toEqual(FILL_ME_IN);\n  });\n\n  it(\"should know array references\", function () {\n    var array = [ \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\" ];\n\n    function passedByReference(refArray) {\n        refArray[1] = \"changed in function\";\n    }\n    passedByReference(array);\n    expect(array[1]).toBe(FILL_ME_IN);\n\n    var assignedArray = array;\n    assignedArray[5] = \"changed in assignedArray\";\n    expect(array[5]).toBe(FILL_ME_IN);\n\n    var copyOfArray = array.slice();\n    copyOfArray[3] = \"changed in copyOfArray\";\n    expect(array[3]).toBe(FILL_ME_IN);\n  });\n\n  it(\"should push and pop\", function () {\n    var array = [1, 2];\n    array.push(3);\n\n    expect(array).toEqual(FILL_ME_IN);\n    \n    var poppedValue = array.pop();\n    expect(poppedValue).toBe(FILL_ME_IN);\n    expect(array).toEqual(FILL_ME_IN);\n  });\n\n  it(\"should know about shifting arrays\", function () {\n    var array = [1, 2];\n\n    array.unshift(3);\n    expect(array).toEqual(FILL_ME_IN);\n    \n    var shiftedValue = array.shift();\n    expect(shiftedValue).toEqual(FILL_ME_IN);\n    expect(array).toEqual(FILL_ME_IN);\n  });  \n});\n"]],"start1":0,"start2":0,"length1":0,"length2":3032}]],"length":3032}
{"contributors":[],"silentsave":false,"ts":1340772176153,"patch":[[{"diffs":[[0,")).toBe("],[-1,"FILL_ME_IN"],[1,"\"object\""],[0,"); //A m"]],"start1":210,"start2":210,"length1":26,"length2":24}]],"length":3030,"saved":false}
{"ts":1340772321504,"patch":[[{"diffs":[[0,"oBe("],[-1,"\""],[1,"'"],[0,"object"],[-1,"\""],[1,"'"],[0,"); /"]],"start1":214,"start2":214,"length1":16,"length2":16}]],"length":3030,"saved":false}
